{"version":3,"sources":["./js/view.js","webpack/bootstrap","./js/main.js"],"names":[],"mappings":";;;;;;;;;AAAA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;;AAEA,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;;AAEA,iBAAiB,QAAQ;AACzB;AACA;AACA;;AAEA;AACA;AACA;AACA,sBAAsB,aAAa;AACnC;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;;;;;;;UC7HA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;;;;;ACtBA;;AAEA,WAAW,mBAAO,CAAC,4BAAQ;;AAE3B;AACA;AACA;AACA,CAAC","file":"bundle.js","sourcesContent":["/* jshint esversion: 6 */\n\nfunction View($el) {\n  this.$el = $el;\n  this.setupEasel();\n}\n\nwindow._randomColorString = function () {\n  return '#' + Math.random().toString(16).substr(-6);\n};\n\nView.prototype.exercise0 = function () {\n  //Challenge: (example) remove the 'square' class from every li\n  //Result: this should cause the grid to turn into a long list of undecorated lis\n  //just a list of dots\n\n  //this one completed as an example :) no additional code necessary\n  $('li').removeClass('square');\n};\n\nView.prototype.exercise1 = function () {\n  //Challenge: Give every square the class 'orange'\n  //Result: Every square should turn orange (we already have a CSS rule)\n\n  //your code here!\n  $('li').addClass('orange');\n};\n\nView.prototype.exercise2 = function () {\n  //Challenge: Remove every square\n  //Result: Every square vanishes\n\n  //your code here!\n  $('li').remove();\n};\n\nView.prototype.exercise3 = function () {\n  //Challenge: Add an <h1> with the text 'i love jquery' under the grid.\n  //Result: An <h1> with the text 'i love jquery' appears under the grid.\n\n  //your code here!\n  let header = $('<h1>').text('i love jquery');\n  $('#easel').append(header);\n  // $('#easel').append('<h1>i love jquery</h1>');\n};\n\nView.prototype.exercise4 = function () {\n  //Challenge: Write your first name in every other square.\n  //Result: Your name appears in every other square.\n\n  //your code here!\n  $('.square:nth-child(odd)').text('Brandon');\n};\n\nView.prototype.exercise5 = function () {\n  //Challenge: Alert the row and column of the square, when the square is clicked.\n  //Result: When a square is clicked, the row and column appear in an alert. for\n  //example: clicking the top left square should alert '0, 0'.\n  //hint: checkout the addRow function at the bottom of the file: we set the\n  //  'data-pos' of every square\n  //your code here!\n  $('.square').on('click', (e) => {\n    let $square = $(e.target);\n    alert($square.attr('data-pos'));\n  });\n};\n\nView.prototype.exercise6 = function () {\n  //Challenge: Give every square a random color!\n  //Result: Every square becomes a color as soon as this code runs. The grid\n  //should become a beautiful rainbow of colors.\n  //hint: use window._randomColorString() (defined at top) to get a random color!\n  //your code here!\n  $('.square').each((i, ele) => {\n    let $sq = $(ele);\n    $sq.css('background', _randomColorString());\n  });\n};\n\nView.prototype.exercise7 = function () {\n  //Challenge: When your mouse goes over a square, console log its color.\n  //Result: When the mouse goes over a square its color should appear in the\n  //console. The color won't be the color's name, but its rbg value.\n  //You should push the button for exercise 6 first to try it on the\n  //rainbow.\n  //your code here!\n\n  $('#easel').on('mouseenter', '.square', (e) => {\n    let $sq = $(e.currentTarget);\n    console.log($sq.css('background-color'));\n  });\n};\n\nView.prototype.setupEasel = function () {\n  const $addRowButton = $('<button>').html('Add a row');\n  this.$el.append($addRowButton);\n  $addRowButton.on('click', this.addRow.bind(this));\n\n  for (let j = 0; j <= 7; j++) {\n    const $button = $('<button>').html('Exercise ' + j);\n    $button.on('click', this['exercise' + j]);\n    this.$el.append($button);\n  }\n\n  for (let i = 0; i < 20; i++) {\n    this.addRow();\n  }\n};\n\nView.prototype.addRow = function () {\n  const rowIdx = this.$el.find('.row').length;\n  const $row = $('<ul>').addClass('row').addClass('group');\n  for (let colIdx = 0; colIdx < 20; colIdx++) {\n    const $square = $('<li>')\n      .addClass('square')\n      .attr('data-pos', [rowIdx, colIdx]);\n    $square.on('mouseenter', (e) => {\n      const $square = $(e.currentTarget);\n      $square.css('background-color', window._randomColorString());\n    });\n    $row.append($square);\n  }\n  this.$el.append($row);\n};\n\nmodule.exports = View;\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","/* globals $ */\n\nvar View = require(\"./view\");\n\n$(function () {\n  var $easel = $(\"#easel\");\n  new View($easel);\n});\n"],"sourceRoot":""}